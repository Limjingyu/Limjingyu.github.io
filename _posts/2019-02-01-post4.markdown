---

layout: post
title:  "STUDY : test code 작성 준비"
date:   2019-02-01 21:53:51
author: imjingyu
categories: Rookie6th
tags: NHN Entertainment

---

## 목적
* 진행중인 프로젝트를 리팩토링하고 테스트하기 위한 목적으로 test code 작성 요령에 대해 정리해보고자 한다.
* 교육내용을 기반으로 이해하지 못했던 부분을 이해하기

## JUnit
### LifeCycle
* @BeforeClass
* @AfterClass
* @Before
* @After
* @Test

### test코드 만들기
* 유닛테스트를 위해 각 클래스의 Test클래스를 만든다.
    * 각 클래스 선택 - 오른쪽 마우스 - new - JUnit Test Case
* 생성 예제(UserService.java)

```
package com.nhnent.rookie.hnhlogin.user;

import static org.junit.Assert.*;

import org.junit.Test;

public class UserAPIControllerTest {

    @Test
    public void test() {
        fail("Not yet implemented");
    }
}
```

### Assertions
* assertTrue : Asserts that a condition is true
* assertFalse : Asserts that a condition is false
* assertEquals : Asserts that two objects are equal
* assertArrayEquals : Asserts that two object arrays are equal
* assertNotNull : Asserts that an object isn't null
* assertNull : Asserts that an object is null
* assertSame : Asserts that two objects refer to the same object
* assertNotSame : Asserts that two objects do not refer to the same object
* assertThat : Asserts that actual satisfies the condition specified by matcher. If not, an AssertionError is thrown with information about the matcher and failing value
  * 예제
  ```
  assertThat(0, is(1)); // fails:
     // failure message:
     // expected: is <1> 
     // got value: <0>
   assertThat(0, is(not(1))) // passes
  ```
* [참고](http://junit.sourceforge.net/javadoc/org/junit/Assert.html)

### @Test 응용
* @Test(timeout=500) : 500밀리초를 넘긴다면 이 테스트는 실패
* @Test(expected=RuntimeException.class) : RuntimeException이 발생해야 테스트가 성공, 그렇지 않으면 실패

## 후기
* test코드를 작성해본 경험이 거의 없었기에 테스트 코드의 동작원리를 이해하고 간단한 예제를 작성하는 것도 쉽지 않았다. 그리고 더 당황스러운 점은 이렇게 예제를 보며 작성했던 테스트코드가 로컬에서는 pass를 했지만 소나큐브를 통해 확인했을땐 라인커버가 올라가지 않고 계속 0으로 뜨는 현상이였다. 팀원들과 이유를 찾아봤지만 찾지 못했고, 연휴가 지나고 조언을 구해봐야 할 것 같다. 일단은 위의 junit을 통해 test코드 작성에 적응하고, 아래의 test기법들의 개념을 익히고 코드를 작성해보며 50이상의 커버리지를 달성할 수 있도록 하겠다.
* 눈에 보이는 수치(커버리지)도 중요하겠지만, 멘토님의 조언대로 `test 코드 작성 = 커버리지`라고 생각하지 않고, `의미있는 test`를 작성하는 것에 의미를 두고 노력하겠다.

### 이후 공부할 내용
* Matchers
  * http://www.vogella.com/tutorials/Hamcrest/article.html
  * http://hamcrest.org/JavaHamcrest/javadoc/1.3/org/hamcrest/Matchers.html

* Mockito
  * 단위 테스트를 위한 Java mocking framework
  * https://nesoy.github.io/articles/2018-09/Mockito

* Integration Test - MvcTest
  * WebMvcTest / Mocking / MockBean
  * http://thswave.github.io/java/2015/03/02/spring-mvc-test.html
  * https://d2.naver.com/helloworld/1341

* MybatisTest
