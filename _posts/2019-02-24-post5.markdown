---

layout: post
title:  "STUDY : 용어정리"
date:   2019-02-24 16:24:01
author: imjingyu
categories: Rookie6th
tags: NHN Entertainment

---

# 정리해봅시다.
* 프로젝트 진행중 확실히 이해하지 못하고 넘어갔던 부분이 많았던게 사실이다. 얕은 지식의 위험함을 알기에 JAVA/Spring과 관련된 기본 지식에 대해 정리해보고자 한다.
    * 평소 궁금했던 용어를 기반으로 개념을 정리
    * 상세 설명은 링크로 대체
* <span style="color:#bfd4f2">~~두서 없음 주의~~</span>
> 누군가에겐 기본일 수 있는 내용들... 나도 기본으로 만들어 놓자!!

---

## JVM, JRE, JDK
### 개념
#### JVM : Java Virtual Machine
* 자바 바이트코드가 실행될 수 있는 런타임 환경을 제공해주는 가상 머신
* 소스코드 로드, 검증, 실행을 담당한다.
#### JRE : Java Runtime Environment
* 이름대로 환경을 담당. JVM이 자바프로그램을 동작시킬 때 필요한 라이브러리 파일과 기타파일들을 가지고 있다.
#### JDK : Java Development Kit
* JDK는 JRE의 상위 집합이며 JRE에있는 모든 항목과 애플릿 및 응용 프로그램을 개발하는 데 필요한 컴파일러 및 디버거와 같은 도구를 포함한다.
### 전체 구성
* [JDK > JRE > JVM](https://wikidocs.net/257)
### 향 후 공부
* JAVA,JDK 버전 https://en.wikipedia.org/wiki/Java_version_history
* openJDK http://taewan.kim/post/openjdk/
### 참고자료
* http://pristinetechschool.com/core-java-differentiate-jvm-jre-jdk-jit/
* https://code.i-harness.com/ko-kr/q/1d170d
* http://www.itworld.co.kr/news/110768

---

## String, StringBuffer, StringBuilder
### 기능
* 모두 문자열을 다루는(저장, 관리) 용도로 사용한다.
### 특징
#### String
* 한 번 생성되면 할당된 메모리 공간이 변하지 않는다. +, concat 등으로 문자열을 변경할 경우, 새로운 객체를 생성해서 사용하기 때문에 문자열 연산이 많은 경우 성능이 좋지 않다.
* 하지만, 이렇게 사용하기 때문에 동기화에 대해 신경쓰지 않아도 된다.
#### StringBuffer
* 버퍼를 가지고 있기에, 문자열 연산에 대해 유연하게 동작가능하다.
* 동기화를 보장하여 thread-safe하다.
* 느리다.
#### StringBuilder
* StringBuffer와 동일하게 동작한다.
* 하지만, 동기화를 지원하지 않아 thread-safe하지 못하다.
* StringBuffer보다 빠르다.
### 참고자료
* https://ooz.co.kr/298

---

## 톰캣 + 카탈리나 + ...
### 톰캣 디렉토리 구조
* bin - 톰캣을 실행하고, 종료시키는 스크립트(.bat 나 .sh)파일이 위치
    * catalina - startup이나, shutdown을 실행하게 되면 내부적으로 catalina가 실행된다. 즉 톰캣이 실행 및 정지가 된다.
* conf - 톰캣 설정파일들이 들어있다.
    * server.xml - 서버설정과 관련된 내용
    * web.xml - 가장많이 접하게될, 중요한 xml이다. 서버가 로드될때 가장 먼저 읽어들이는 파일이다.서블릿 설정과 관련된 내용등이 들어있다.
* lib - 톰캣구동하는데 필요한 라이브러리(jar)가 들어있다.
* temp - 톰캣이 실행되는 동안 임시 파일이 위치한다.
* webapps - 웹어플리케이션이 위치한다.
* work - 톰캣이 실행되는 동안 임시파일이 위치한다.
### 카탈리나 
* 톰캣은 여러개의 기능(부품)으로 구성한다. 톰캣의 코어 컴포넌트는 카탈리나라고 칭한다.
* 카탈리나는 톰캣의 실질적인 구동을 제공한다.
* 톰켓 서버 가동 = 카탈리나 startup
### AJP(Apache Jserv Protocol)
* 웹서버 뒤에 있는 어플리케이션 서버로부터 웹서버로 들어오늘 요청을 위임할 수 있는 바이너리 프로토콜
### 참고자료
* https://m.blog.naver.com/PostView.nhn?blogId=seotaji&logNo=80200319536&proxyReferer=https://www.google.com/
* https://ehdvudee.tistory.com/8
* https://en.wikipedia.org/wiki/Apache_JServ_Protocol

---

## 로그
### 로깅
* 시스템을 작동할 때 시스템의 작동 상태의 기록과 보존, 이용자의 습성 조사 및 시스템 동작의 분석 등을 하기 위해 작동중의 각종 정보를 기록해둘 필요가 있다. 이 기록을 만드는 것을 로깅이라 한다. 즉, 로그 시스템의 사용에 관계된 일련의 「사건」을 시간의 경과에 따라 기록하는 것이다. (출처 : 네이버 지식백과)
* 프로그램 개발이나 운영 시 발생하는 문제점을 추적 하거나 운영 상태를 모니터링 하는 정보를 기록하는 것
* Sysout.out.pringln()은 IO리소스를 많이 사용하기 때문에 시스템에 부하를 가져온다. 로그를 파일로 저장하여 사용하면 이러한 단점을 개선하여 분석할 수 있다.
#### Logback
* "자바 오픈소스 로깅 프레임워크"로 SLF4J의 구현체이자 스프링 부트의 기본 로그 객체
* log4j, log4j2, JUL(java.util.logging)과 성능을 비교했을 때 logback은 훌륭한 성능을 보여준다.
### 향 후..
* 전체적으로 더 공부해서 실무에서 유용하게 사용할 수 있도록 해보는걸로..!
### 참고자료
* https://jeong-pro.tistory.com/154
* https://sarc.io/index.php/tomcat/900-apache-tomcat-java-logging-juli
* Log4j / Logback : https://goddaehee.tistory.com/45
* Logback
    * https://logback.qos.ch/manual/
    * https://doublesprogramming.tistory.com/82

---

## 인터셉터
### 개념
* 인터셉터에서 어떠한 요청이 들어올 때, 그 사람의 로그인 여부를 판단해서 로그인이 되어있으면 요청한 페이지로 이동시키고, 로그인이 되어있지 않을경우 바로 메인 페이지로 이동시키면 끝이다. 
* 즉, 단 하나의 인터셉터로 프로젝트내의 모든 요청에서 로그인 여부를 관리할 수 있는것이다.
### 참고자료
* https://addio3305.tistory.com/43

---

## Maven
### 역할
* 필요한 라이브러리(jar파일 등)를 특정 문서(pom.xml)에 정의해 놓으면 네트워크를 통해서 라이브러리들을 자동으로 다운받아준다.
### Lifecyle
* Maven build : 메이븐 빌드를 실행한다.
* Maven clean : target에 지정된 모든 소스를 삭제한다.
* Maven generate-sources : 컴파일 과정에 포함될 소스를 생성한다.
* Maven install : Local Repository에 패키지를 복사한다.
### 참고자료
* https://mangkyu.tistory.com/8?category=761303

---

## jar, war, ...
### jar
* **j**ava **ar**chive
* 여러개의 자바 클래스 파일과, 클래스들이 이용하는 관련 리소스(텍스트, 그림 등) 및 메타데이터를 하나의 파일로 모아서 자바 플랫폼에 응용 소프트웨어나 라이브러리를 배포하기 위한 소프트웨어 패키지 파일 포맷
### war
* **w**eb **ar**chive
*  자바서버 페이지, 자바 서블릿, 자바 클래스, XML, 파일, 태그 라이브러리, 정적 웹 페이지 (HTML 관련 파일) 및 웹 애플리케이션을 함께 이루는 기타 자원을 한데 모아 배포하는데 사용되는 JAR 파일
### 기타
* RAR (resource adapter archive) : J2EE 커넥터 아키텍처(JCA) 애플리케이션을 묶는데 사용되는 압축 포맷
* EAR (enterprise archive) : 자바 엔터프라이스 애플리케이션에서 이용되는 압축 포맷으로, 애플리케이션 클래스 및 관련 JAR, WAR, RAR 압축 파일들을 묶는 용도로 사용
* APK (Android Application Package) : 안드로이드 애플리케이션에서 사용되는 자바 압축 포맷의 일종
### 참고자료
* 위키백과 https://ko.wikipedia.org/wiki/JAR_%28파일_포맷%29

---

## RESTful API
### 개념
* REST : **RE**presentational **S**tate **T**ransfer
* REST란, "웹에 존재하는 모든 자원(이미지, 동영상, DB 자원)에 고유한 URI를 부여해 활용"하는 것으로, 자원을 정의하고 자원에 대한 주소를 지정하는 방법론을 의미한다고 한다.
* 따라서 Restful API는 REST 특징을 지키면서 API를 제공하는 것을 의미한다.
### REST 구성
* 자원 (Resouce) - URI
* 행위 (Verb) - HTTP Method
* 표현 (Representations)
###  Web API의 본질은?
* Decoupling + Platform Agnostic
    * Platform Agnostic : 플랫폼에 종속적이 않음을 뜻한다. 즉, 특정 기기나 OS에서만 돌아가는 것이 아닌 광범위하게 사용될 수 있는 것
### REST 안티 패턴
* GET/POST를 이용한 터널링
    * ex : 메서드의 실제 동작은 리소르르 업데이트 하는 내용인데, HTTP PUT을 사용하지 않고 GET을 사용한 경우
* Self-descriptiveness 속성을 사용하지 않음
* HTTP Response code를 사용하지 않음
    * HTTP Response code를 충실하게 따르지 않고, 성공은 200, 실패는 500과 같이 1~2개의 HTTP Response code만을 사용하는 경우
    * ex : 에러 메시지를 200 response code와 함께 보내는 경우
### 참고자료
* https://brainbackdoor.tistory.com/53
* https://joonyon.tistory.com/13

---

## Annotation
* @를 이용하여 자바코드에 주석을 달아 특별한 의미를 부여한 것
* 본질적인 목적은 소스 코드에 메타데이터를 표현
* 프로그램 코드의 일부가 아닌 프로그램에 관한 데이터를 제공, 코드에 정보를 추가하는 정형화된 방법
### Reflection 
*객체를 통해 클래스 정보를 분석해 내는 프로그래밍 기법
* BeanFactory는 어플리케이션이 실행한 후 객체가 호출 될 당시 객체의 인스턴스를 생성하게 되는데, 그 때 필요한 기술이 Reflection ~~(->공부하자)~~
### Spring Annotaion
* 아래 링크들 참고해서 정리하고 공부하자!
    * https://gmlwjd9405.github.io/2018/12/02/spring-annotation-types.html
    * https://jeong-pro.tistory.com/151
    * https://springframework.guru/spring-framework-annotations/
### 참고자료
* https://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Annotation.html
* https://sjh836.tistory.com/8
* Reflection : https://gyrfalcon.tistory.com/entry/Java-Reflection

---

## Redis
* **RE**mote **DI**ctionary **S**erver
* Redis는 빠른 오픈 소스 인 메모리 키 값 데이터 구조 스토어로 Redis는 다양한 인 메모리 데이터 구조 집합(key/value, list, hashset, ...)을 제공하므로 다양하게 사용할 수 있다.
* 주로 캐시로 사용한다.
* 처리 속도가 빠르고, 만료일을 지정하여 자동삭제가 가능하다.
### 참고자료
* https://aws.amazon.com/ko/elasticache/what-is-redis/

---

## JSTL
### 정의
* JSTL은 JSP 표준라이브러리(JSP Standard Tag Library)의 약어이다. 자주 사용될 수 있는 커스텀 태그들을 모아서 표준으로 모아놓은 태그 라이브러리다.
### 참고자료
* https://sjh836.tistory.com/136?category=680970
* http://java.sun.com/jsp/jstl

---

## MyBatis
### 정의
* jdbc를 인자로 필요로하는 jdbc에 종속된 라이브러리로, 개발자들은 jdbc를 직접 호출하지 않고 MyBatis에게 일을 시킴으로써 간단하게 사용 가능
### JDBC
*  JDBC(Java Database Connectivity)는 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API이다. JDBC는 데이터베이스에서 자료를 쿼리하거나 업데이트하는 방법을 제공한다. (출처 : 위키백과)
### 장점
* 쿼리문을 xml(mapper)로 분리하여 관리하기에 유지보수에 유리하고, 중복되는 내용을 제거할 수 있다.
### 참고자료
* https://okky.kr/article/516817?note=1549827

---

## DDD
### Domain Driven Design
* ...찬찬히 공부하자!
### 참고자료
* https://vandbt.tistory.com/2

---

## Controller에서 다양한 타입으로 Request 요청받기
* @PathVariable : 중괄호에 명시된 값을 변수로 받는다.
* @RequestParam : http 요청 파라미터를 변수로 받는다.
* @ModelAttribute : http 요청 파라미터를 VO로 받는다.
* @RequestBody : HTTP 요청의 body 부분을 그대로 변수에 넣는다. XML, JSON 일떄 이것을 주로 사용한다.
* @CookieValue : 요청의 쿠키정보를 가져온다.
* @RequestHeader : 요청헤더 정보를 가져온다.
### 참고자료
* https://sjh836.tistory.com/143?category=680970

---

## RestTemplate
### 정의
* 스프링에서 제공하는 http 통신에 유용하게 쓸 수 있는 템플릿이다.
* 반복적인 코드를 줄일 수 있고, Restful형식에 맞춰져있으며 json, xml등 형식에 구애받지 않는다.
### 참고자료
* https://sjh836.tistory.com/141

---

## lombok
### 개념
* 자바에서 @Getter, @Setter 같은 annotation 기반으로 관련 기존 DTO, VO, Domain Class 작성할 때, 멤버 변수에 대한 Getter/Setter Method, Equals(), hashCode(), ToString()과 멤버 변수에 값을 설정하는 생성자 등등을 자동으로 생성해 주는 라이브러리
### 어노테이션
* @Getter / @Setter / @NonNull / @ToString / @EqualsAndHashCode / @Data / @Cleanup / @Synchronized / @SneakyThrows
### 주의 사항
* @Data는 지양
    * @ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArgsConstructor을 한번에 사용하는 강력한 어노테이션으로 불필요한 어노테이션이 함께 추가된다.
* 무분별한 Setter 남용은 지양
    * Setter는 그 의도가 분명하지 않고 객체를 언제든지 변경할 수 있는 상태가 되어서 객체의 안전성이 보장받기 힘들다.
### 참고자료
* http://jnb.ociweb.com/jnb/jnbJan2010.html
* https://taetaetae.github.io/2017/02/22/lombok/
* https://www.popit.kr/실무에서-lombok-사용법/

---

# 일단 여기까지!
## 후기
* 전반적인 지식을 정리하기 위해 용어 위주로 정리해보았다. 필요에 따라 깊이 있게 공부를 꾸준히 하자!
* 주로 구글링을 통해 다른 개발자선배님? 들의 블로그와 위키를 통해 자료를 정리하였다. 잘못된 정보나 옛날 자료가 나올 수 있다는 사실은 알지만, 공식문서를 보기엔 시간적 여유와 영어능력이 아직 부족한것 같다. ~~(핑계)~~ 자료를 선별할 수 있는 눈과 공식문서에서 필요한 내용을 빠르게 catch할 수 있도록 내공을 키워보자!
### 더더더더
* 루키공유 내용들/spring의 전반적인..!/JavaScript/Junit Test/예외처리/...

## 올해 목표
> (최대한 빨리)1인분하기
